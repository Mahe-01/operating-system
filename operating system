<<<<<<<<<<<<<<<<<<<<<<exp-2 menu based math calculator>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
echo "Menu Based Calculator" 
echo "Enter the Operands" 
read a 
read b 
echo "Enter the Operator"
read o
case $o in 
"+" ) echo "$a + $b" = `expr $a + $b`;; 
"-" ) echo "$a + $b" = `expr $a - $b`;; 
"*" ) echo "$a + $b" = `expr $a * $b`;; 
"/" ) echo "$a + $b" = `expr $a / $b`;; 
* ) echo "Inavlid Operation" 
esac

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<printing pattern using loop>>>>>>>>>>>>>>>>>>
echo "enter the number of rows"
read r
i=1
t=1
while [ $i -le $r ]
do
j=1
while [ $j -le $i ]
do
echo -n "*"
j=$((j+1))
done
echo
i=$((i+1))
done

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<searching a substring in a given text>>>>>>>>>>>>>
read str read substr 
prefix=${str%%$substr*} 
index=${#prefix} 
if [[ index -eq ${#str} ]]; 
then 
 echo "Substring is not present in string."
 else 
 echo "Index of substring in string : $index" 
 fi
 
 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 <<<<<<<<<<<<<converting file names from uppercase to lowercase>>>>>>>>>>>>>>>>
 echo -n "Enter the filename:"
read file
if [ ! -f $file ]
then
echo "file does not exists"
exit
fi
tr '[A-Z]' '[a-z]' $file

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<showing variuos system information>>>>>>>>>>>>>>>>>>>
echo SYSTEM INFORMATION
echo $LOGNAME
echo "Current Date is $(date)"
echo "Current Directory is $(pwd)"
echo "Network Name is $(uname -n)"
echo "Kernal Name is $(uname -s)"
echo "Kernal Version is $(uname -v)"
echo "Kernal Release is $(uname -r)"
echo "Kernal OS is $(uname -o)"
echo "Proessor Type is $(uname -p)"
echo "Kernel Machine Information is $(uname -m)"
echo "All Information is $(uname -a)"

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<implement of fcfs>>>>>>>>>>>>>>>>>>>>>>>>
#include<stdio.h>
int main()
{
int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
float avg_wt,avg_tat;
printf("Enter number of process:");
scanf("%d",&n);
printf("\nEnter Burst Time:\n");
for(i=0;i<n;i++)
{
printf("p%d:",i+1);
scanf("%d",&bt[i]);
p[i]=i+1; 
}
//sorting of burst times
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(bt[j]<bt[pos])
pos=j;
}
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0; 
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=(float)total/n; 
total=0;
printf("\nProcesst Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; 
total+=tat[i];
printf("\np%d\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=(float)total/n; 
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<sjf>>>>>>>>>
#include <stdio.h>
int main() 
{
int arrival_time[10], burst_time[10], temp[10];
int i, smallest, count = 0, time, limit;
double wait_time = 0, turnaround_time = 0, end;
float average_waiting_time, average_turnaround_time;
printf("\nEnter the Total Number of Processes:");
scanf("%d", &limit); 
printf("\nEnter Details of %d Processes\n", limit);
for(i = 0; i < limit; i++)
{
printf("\nEnter Arrival Time:");
scanf("%d", &arrival_time[i]);
printf("Enter Burst Time:");
scanf("%d", &burst_time[i]); 
temp[i] = burst_time[i];
}
burst_time[9] = 9999; 
for(time = 0; count != limit; time++)
{
smallest = 9;
for(i = 0; i < limit; i++)
{
if(arrival_time[i] <= time && burst_time[i] < 
burst_time[smallest] && burst_time[i] > 0)
{
smallest = i;
}
}
burst_time[smallest]--;
if(burst_time[smallest] == 0)
{
count++;
end = time + 1;
wait_time = wait_time + end - arrival_time[smallest] -
temp[smallest];
turnaround_time = turnaround_time + end -
arrival_time[smallest];
}
}
average_waiting_time = wait_time / limit; 
average_turnaround_time = turnaround_time / limit;
printf("\n\nAverage Waiting Time:%lf\n", average_waiting_time);
printf("Average Turnaround Time:%lf\n", 
average_turnaround_time);
return 0;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<priority queue>>>>>>>>>>>>
#include<stdio.h>
int main()
{
int 
bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_t
at;
printf("Enter Total Number of Process:");
scanf("%d",&n);
printf("\nEnter Burst Time and Priority\n");
for(i=0;i<n;i++)
{
printf("\nP[%d]\n",i+1);
printf("Burst Time:");
scanf("%d",&bt[i]);
printf("Priority:");
scanf("%d",&pr[i]);
p[i]=i+1; //contains process number
}
//sorting burst time, priority and process number in ascending 
order using selection sort
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(pr[j]<pr[pos])
pos=j;
}
temp=pr[i];
pr[i]=pr[pos];
pr[pos]=temp;
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0; //waiting time for first process is zero
//calculate waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=total/n; //average waiting time
total=0;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround 
Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; //calculate turnaround time
total+=tat[i];
printf("\nP[%d]\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=total/n; //average turnaround time
printf("\n\nAverage Waiting Time=%d",avg_wt);
printf("\nAverage Turnaround Time=%d\n",avg_tat);
return 0;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<reader writer>>>>>>>>>>>
#include<stdio.h>
int main()
{
typedef int semaphore;
semaphore sread=0, swrite=0;
int ch,r=0;
printf("\nReader writer");
do
{
printf("\nMenu");
printf("\n\t 1.Read from file");
printf("\n \t2.Write to file");
printf("\n \t 3.Exit the reader");
printf("\n \t 4.Exit the writer");
printf("\n \t 5.Exit");
printf("\nEnter your choice:");
scanf("%d",&ch);
switch(ch)
{
case 1: if(swrite==0)
{
sread=1;
r+=1;
printf("\nReader %d reads",r);
}
else
{printf("\n Not possible");
}
break;
case 2: if(sread==0 && swrite==0)
{
swrite=1;
printf("\nWriter in Progress");
}
 else if(swrite==1)
{printf("\nWriter writes the files");
}
else if(sread==1)
{printf("\nCannot write while reader reads the file");
}
else
printf("\nCannot write file");
break;
case 3: if(r!=0)
{
printf("\n The reader %d closes the file",r);
r-=1;
}
else if(r==0)
{
printf("\n Currently no readers access the file");
sread=0;
}
else if(r==1)
{
printf("\nOnly 1 reader file");
}
else
printf("%d reader are reading the file\n",r);
break;
case 4: if (swrite==1)
{
printf("\nWriter close the file");
swrite=0;
}
else
printf("\nThere is no writer in the file");
break;
case 5: 
{
 printf("exit");
}
} 
}
while(ch<6);
return 0;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<dining philosopher>>>>>>>>
#include<stdio.h>
#define LEFT (i+4) %5
#define RIGHT (i+1) %5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
int state[5];
void put_forks(int);
void test(int);
void take_forks(int);
void philosopher(int i)
{
if(state[i]==0)
{
take_forks(i);
if(state[i]==EATING)
printf("\n Eating in process....");
put_forks(i);
}
}
void put_forks(int i)
{
state[i]=THINKING;
printf("\n philosopher %d completed its works",i);
test(LEFT);
test(RIGHT);
}
void take_forks(int i)
{
state[i]=HUNGRY;
test(i);
}
void test(int i)
{
if(state[i]==HUNGRY && state[LEFT]!=EATING && state[RIGHT]!=EATING)
{
printf("\n philosopher %d can eat",i);
state[i]=EATING;
}
}
int main()
{
int i;
for(i=1;i<=5;i++)
state[i]=0;
printf("\n\t\t\t Dining Philosopher Problem");
printf("\n\t\t...........");
for(i=1;i<=5;i++)
{
printf("\n\n the philosopher %d falls hungry\n",i);
philosopher(i);
}
return 0;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<first fit>>>>>>>>>>
// C implementation of First - Fit algorithm 
#include<stdio.h> 
// Function to allocate memory to // blocks as per First fit algorithm 
void firstFit(int blockSize[], int m, int processSize[], int n) 
{ 
 int i, j; 
 // Stores block id of the 
// block allocated to a process int allocation[n]; 
 // Initially no block is assigned to any process 
 for(i = 0; i < n; i++) 
 { 
 allocation[i] = -1; 
 } 
 // pick each process and find suitable blocks 
 // according to its size ad assign to it 
 for (i = 0; i < n; i++) //here, n -> number of processes 
 { 
 for (j = 0; j < m; j++) //here, m -> number of blocks 
 { 
 if (blockSize[j] >= processSize[i]) 
 { 
 // allocating block j to the ith process 
 allocation[i] = j; 
 // Reduce available memory in this block. 
 blockSize[j] -= processSize[i]; 
 break; //go to the next process in the queue 
 } 
 } 
} 
 
 printf("\nProcess No.\tProcess Size\tBlock no.\n"); 
 for (int i = 0; i < n; i++) 
 { 
 printf(" %i\t\t\t", i+1); 
 printf("%i\t\t\t\t", processSize[i]); 
 if (allocation[i] != -1) 
 printf("%i", allocation[i] + 1); 
 else 
 printf("Not Allocated"); 
 printf("\n"); 
 } 
}
// Driver code 
int main() 
{ 
 int pno; //number of blocks in the memory 
 int bno; //number of processes in the input queue 
 int x; 
 int y; 
 int blockSize[100]; //blocks 
 int processSize[100];//processes 
 printf("Enter no. of blocks: "); 
scanf("%d", &bno); 
printf("\nEnter size of each block: "); 
 for(x = 0; x < bno; x++) 
 scanf("%d", &blockSize[x]); 
printf("\nEnter no. of processes: "); 
 scanf("%d", &pno); 
printf("\nEnter size of each process: "); 
 for(y = 0; y < pno; y++) 
 scanf("%d", &processSize[y]); 
int m = bno; 
 int n = pno;
 firstFit(blockSize, m, processSize, n); 
 return 0 ; 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<best fit>>>>>>>>>>>
// C implementation of Best - Fit algorithm 
#include<stdio.h> 
void main() 
{ 
int fragment[20],b[20],p[20],i,j,nb,np,temp,lowest=9999; 
static int barray[20],parray[20]; 
printf("\n\t\t\tMemory Management Scheme - Best Fit"); 
printf("\nEnter the number of blocks:"); 
scanf("%d",&nb); 
printf("Enter the number of processes:"); 
scanf("%d",&np); 
printf("\nEnter the size of the blocks:-\n"); 
for(i=1;i<=nb;i++) 
 { 
printf("Block no.%d:",i); 
 scanf("%d",&b[i]); 
 } 
printf("\nEnter the size of the processes :-\n"); 
for(i=1;i<=np;i++) 
 { 
 printf("Process no.%d:",i); 
 scanf("%d",&p[i]); 
 } 
for(i=1;i<=np;i++) 
{ 
for(j=1;j<=nb;j++) 
{ 
if(barray[j]!=1) 
{ 
temp=b[j]-p[i]; 
if(temp>=0) 
if(lowest>temp) 
{ 
parray[i]=j; 
lowest=temp; 
} 
} 
} 
fragment[i]=lowest; 
barray[parray[i]]=1; 
lowest=10000; 
} 
printf("\nProcess_no\tProcess_size\tBlock_no");
for(i=1;i<=np && parray[i]!=0;i++) 
printf("\n%d\t\t%d\t\t%d",i,p[i],parray[i]); 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<worst fit>>>>>>>>>>>>>
// C++ implementation of worst - Fit algorithm 
#include<stdio.h> 
// Function to allocate memory to blocks as per worst fit 
// algorithm 
void worstFit(int blockSize[], int m, int processSize, int n) 
{ 
// Stores block id of the block allocated to a 
// process 
int allocation[n]; 
// Initially no block is assigned to any process 
 for(int i = 0; i < n; i++) 
 { 
 allocation[i] = -1; 
 } 
// pick each process and find suitable blocks 
 // according to its size ad assign to it 
 for (int i=0; i<n; i++) 
{ 
// Find the best fit block for current process 
 int wstIdx = -1; 
 for (int j=0; j<m; j++) 
{ 
if (blockSize[j] >= processSize[i]) 
{ 
if (wstIdx == -1) 
 wstIdx = j; 
else if (blockSize[wstIdx] < blockSize[j]) 
wstIdx = j; 
} 
} 
// If we could find a block for current process 
 if (wstIdx != -1) 
{ 
 // allocate block j to p[i] process 
 allocation[i] = wstIdx; 
// Reduce available memory in this block. 
 blockSize[wstldx]-=processSize[i];
} 
} 
printf("\nProcess No.\tProcess Size\tBlock no.\n"); 
 for (int i = 0; i < n; i++) 
{ 
printf(" %i\t\t\t", i+1); 
 printf("%i\t\t\t\t", processSize[i]); 
if (allocation[i] != -1) 
 printf("%i", allocation[i] + 1); 
else 
printf("Not Allocated"); 
 printf("\n"); 
} 
} 
// Driver code int main() 
{ 
int pno; //number of blocks in the memory 
int bno; //number of processes in the input queue 
int x; 
int y; 
 int blockSize[100]; //blocks 
 int processSize[100];//processes 
 printf("Enter no. of blocks: "); 
scanf("%d", &bno); 
printf("\nEnter size of each block: "); 
 for(x = 0; x < bno; x++) 
 scanf("%d", &blockSize[x]); 
printf("\nEnter no. of processes: "); 
 scanf("%d", &pno); 
printf("\nEnter size of each process: "); 
 for(y = 0; y < pno; y++) 
 scanf("%d", &processSize[y]); 
 int m = bno; 
 int n = pno; 
 worstFit(blockSize, m, processSize, n); 
 return 0 ; 
} 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<combied worst best first fit>>>>>>>
#include<stdio.h>
int main()
{
int p[20],f[20],min,minindex,n,i,j,c,f1[20],f2[20],f3[20],k=0,h=0,flag,t=0,n1;
printf("enter the number of memory partitions:\n");
scanf("%d",&n);
printf("enter the number of process");
scanf("%d",&n1);
for(i=0;i<n;i++)
{
printf("\n enter the memory partition size %d:",i+1);
scanf("%d",&f[i]);
f2[i]=f[i];
f3[i]=f[i];
}
for(i=0;i<n;i++)
{
printf("\n enter the page size %d:",i+1);
scanf("%d",&p[i]);
}
do
{
printf("\n1.first fit\n");
printf("\n2.best fit\n");
printf("\n3.worst fit\n");
printf("\nenter your choice\n");
scanf("%d",&c);
switch(c)
{
case 1:
for(i=0;i<n1;i++)
{
for(j=0;j<n;j++)
{
f1[i]=0;
if(p[i]<=f[j])
{
f1[i]=f[j];
f[j]=0;
break;
}
}
}
break;
case 2:
for(i=0;i<n1;i++)
{
min=9999;
minindex=-1;
for(j=0;j<n;j++)
{
if(p[i]<=f2[j] && f2[j]!=0 && min>f2[j])
{
min=f2[j];
minindex=j;
}
}
f1[i]=f[minindex];
f2[minindex]=0;
}
break;
case 3:
for(i=0;i<n1;i++)
{
f1[i]=0;
for(j=0;j<n;j++)
{
if(p[i]<f3[j])
{
k++;
if(k==1)
f1[i]=f3[j];
if(f1[i]<=f3[j])
{
flag=1;
f1[i]=f3[j];
h=j;
}
}
}
k=0;
if(flag==1)
f3[h]=0;
}
break;
default:
printf("\n out of choice");
}
printf("\n----------\n");
printf("\n|page |frame |free \n");
printf("\n----------\n");
t=0;
for(i=0;i<n1;i++)
{
h=f1[i]-p[i];
if(h<0)
h=0;
printf("\n%d\t\t%d\t\t%d",p[i],f1[i],h);
t=t+h;
}
printf("\n----------\n");
printf("\n total free spae in memory:%d",t);
}
while(c<4);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<bankers algorithm>>>>>>>>>>
#include <stdio.h>
int main()
{
int n, m, i, j, k, y,alloc[20][20],max[20][20],avail[50],ind=0; 
printf("Enter the no of Proceses:");
scanf("%d",&n);
printf("Enter the no of Resources:");
scanf("%d",&m);
printf("Enter the Allocation Matrix:");
for (i = 0; i < n; i++) {
for (j = 0; j < m; j++)
scanf("%d",&alloc[i][j]);
}
printf("Enter the Max Matrix:");
for (i = 0; i < n; i++) {
for (j = 0; j < m; j++)
scanf("%d",&max[i][j]);
}
printf("Enter the Available Matrix");
for(i=0;i<m;i++)
scanf("%d",&avail[i]);
int finish[n], safesequence[n],work[m],need[n][m];
//calculating NEED matrix
for (i = 0; i < n; i++) {
for (j = 0; j < m; j++)
need[i][j] = max[i][j] - alloc[i][j];
}
printf("NEED matrix is");
for (i = 0; i < n; i++) 
{
printf("\n");
for (j = 0; j < m; j++)
printf(" %d ",need[i][j]);
}
for(i=0;i<m;i++)
{
work[i]=avail[i];
}
for (i = 0; i < n; i++) {
finish[i] = 0;
}
for (k = 0; k < n; k++) {
for (i = 0; i < n; i++) 
{
if (finish[i] == 0) 
{
int flag = 0;
for (j = 0; j < m; j++) 
{
if (need[i][j] > work[j])
{
flag = 1;
break;
}
}
if (flag == 0) {
safesequence[ind++] = i;
for (y = 0; y < m; y++)
work[y] += alloc[i][y];
finish[i] = 1;
}
}
}
}
printf("\nFollowing is the SAFE Sequence\n");
for (i = 0; i <= n - 1; i++)
printf(" P%d ", safesequence[i]);
}
<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<producer consumer>>>>
#include<stdio.h>
int mutex=1,full=0,empty=3,x=0;
int main()
{
int n;
void producer();
void consumer();
int wait(int);
int signal(int);
printf("\n 1.producer \n 2.consumer \n 3.exit");
while(1)
{
printf("\n enter your choice:");
scanf("%d",&n);
switch(n)
{
case 1:
if((mutex==1)&&(empty!=0))
producer();
else
printf("buffer is full");
break;
case 2:
if((mutex==1)&&(full!=0))
consumer();
else
printf("buffer is empty");
break;
case 3:
{
 printf("exit");
}
break;
}
}
}
int wait(int s)
{
return(--s);
}
int signal(int s)
{
return(++s);
}
void producer()
{
mutex=wait(mutex);
full=signal(full);
empty=wait(empty);
x++;
printf("\n producer produces the item %d",x);
mutex=signal(mutex);
}
void consumer()
{
mutex=wait(mutex);
full=wait(full);
empty=signal(empty);
printf("\n consumer consumes item %d",x);
x--;
mutex=signal(mutex);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<paging>>>>>>>>>>>
#include<stdio.h> 
#include<math.h> 
int main() 
{ 
int size,m,n,pgno,pagetable[3]={5,6,7},i,j,frameno; 
double m1; 
int ra=0,ofs;
printf("Enter process size (in KB of max 12KB):");
//reading memeory size
scanf("%d",&size); 
m1=size/4; 
n=ceil(m1); 
printf("Total No. of pages: %d",n); 
printf("\nEnter relative address (in hexadecimal notation eg.0XRA) \n"); 
//printf("The length of relative Address is : 16 bits \n\n The size of offset is :12 
scanf("%d",&ra); 
pgno=ra/1000; 
//calculating physical address
ofs=ra%1000; 
printf("page no=%d\n",pgno); 
printf("page table"); 
for(i=0;i<n;i++) 
printf("\n %d [%d]",i,pagetable[i]); 
frameno=pagetable[pgno]; 
printf("\n Equivalent physical address : %d%d",frameno,ofs); 
return 0;
}
